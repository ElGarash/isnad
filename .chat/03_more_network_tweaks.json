{
  "requesterUsername": "AbdulrhmnGhanem",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/37152329",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "editing-session",
  "requests": [
    {
      "requestId": "request_2dbfd58d-9c3f-4b52-b23e-c99b21e4c93a",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 109
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 110
            },
            "text": "make a root node that all nodes the first two nodes are connected to, the node label is `the prophet (pbuh)` ",
            "kind": "text"
          }
        ],
        "text": "make a root node that all nodes the first two nodes are connected to, the node label is `the prophet (pbuh)` "
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "scheme": "file"
            },
            "id": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "name": "hadith-transmission-chain.tsx",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "I'll help you modify the code to add a root node representing \"the prophet (pbuh)\" that connects to the first level narrators.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd a root node and connect it to first-level narrators. We'll modify the data transformation logic in the useMemo hook.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for determining maxChainLength and levelNodes...\n\n    // Create nodes with positions\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            // ...existing node creation code...\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n// ...existing code...\n```\n\nThe changes:\n1. Added a root node representing the Prophet (PBUH) at the top of the graph\n2. Positioned it at the center-top of the visualization\n3. Connected all first-level narrators (index 0) to this root node\n4. Used a gold color to distinguish the Prophet's node\n\nThe rest of the component remains unchanged. The root node will appear at the top of the graph with connections flowing down to the first level of narrators.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "\"use client\"",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import React, { useEffect, useState } from \"react\"",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Graph } from \"react-d3-graph\"",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "interface HadithChainProps {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  hadithData: {",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithNo: string;",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    transmissionChains: {",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      SanadNo: string;",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      Narrators: {",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorID: string;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorName: string;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorGen: string;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }[];",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }[];",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }[];",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const generationColors = {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Comp_RA': \"#4CAF50\",",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Follower_Tabi': \"#2196F3\",",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Succ_TabaTabi': \"#FFC107\",",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export default function HadithTransmissionChain({ hadithData }: HadithChainProps) {",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  useEffect(() => {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    setDimensions({",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      width: window.innerWidth,",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      height: window.innerHeight",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const handleResize = () => {",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      setDimensions({",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        width: window.innerWidth,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        height: window.innerHeight",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    window.addEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return () => window.removeEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [])",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Transform data for react-d3-graph",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphData = React.useMemo(() => {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodes: any[] = []",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const links: any[] = []",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const seenNodes = new Set()",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const levelNodes = new Map<number, string[]>()",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodePositions = new Map<string, {x: number, y: number}>()",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Add root node (Prophet PBUH)",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootNodeId = \"prophet-pbuh\"",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodes.push({",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      id: rootNodeId,",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      name: \"The Prophet (PBUH)\",",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"#FFD700\", // Gold color for the Prophet's node",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelPosition: \"left\",",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      x: dimensions.width / 2,",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      y: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fx: dimensions.width / 2,",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fy: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    seenNodes.add(rootNodeId)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // First pass: determine maximum chain length and group nodes by level",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const maxChainLength = Math.max(",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    )",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Group nodes by their level",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach(chain => {",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.has(index)) {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.set(index, [])",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.get(index)?.push(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Create nodes with positions - modified to maintain vertical alignment",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach((chain, chainIndex) => {",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        let parentX: number | null = null;",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        ",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!seenNodes.has(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            seenNodes.add(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const yPosition = (index + 1) * verticalSpacing",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nodesAtLevel = levelNodes.get(index) || []",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const position = nodesAtLevel.indexOf(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const totalNodesAtLevel = nodesAtLevel.length",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Reduce horizontal spacing by using a smaller divisor",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Adjust position to be more centered",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            parentX = xPosition",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Fix the center point calculation",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const isRightSide = xPosition > centerPoint",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodes.push({",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              id: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              name: narrator.NarratorName,",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              color: \"red\",",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              labelPosition: isRightSide ? \"right\" : \"left\",",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              x: xPosition,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              y: yPosition,",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fx: xPosition, // Fix x position",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fy: yPosition, // Fix y position",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Connect first-level narrators to the Prophet's node",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index === 0) {",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: rootNodeId,",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Update links",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index < chain.Narrators.length - 1) {",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nextNarrator = chain.Narrators[index + 1]",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: nextNarrator.NarratorID,",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return { nodes, links }",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [hadithData, dimensions])",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphConfig = {",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    directed: true,",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodeHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    linkHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightDegree: 1,",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightOpacity: 0.2,",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    maxZoom: 8,",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    minZoom: 0.1,",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    node: {",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"lightgreen\",",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      size: 120, // Further reduced from 150 to 120",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightStrokeColor: \"blue\",",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelProperty: \"name\",",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fontSize: 12,",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightFontSize: 14,",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      renderLabel: true,",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    link: {",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strokeWidth: 1.5,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightColor: \"lightblue\",",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    d3: {",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      gravity: 0, // Disable gravity",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkLength: 30, // Further reduced from 50 to 30",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkStrength: 1,",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      alphaTarget: 0,",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    },",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1073741825,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    height: dimensions.height,",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1073741825,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    width: dimensions.width,",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1073741825,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  }",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1073741825,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1073741825,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  return (",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1073741825,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    <div style={{ ",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1073741825,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      position: 'fixed', ",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1073741825,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      top: 0, ",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1073741825,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      left: 0, ",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1073741825,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      right: 0, ",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1073741825,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      bottom: 0, ",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1073741825,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      backgroundColor: 'transparent' ",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1073741825,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }}>",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1073741825,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <Graph",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1073741825,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        id=\"hadith-graph\"",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1073741825,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        data={graphData}",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1073741825,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        config={graphConfig}",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1073741825,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1073741825,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    </div>",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1073741825,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  )",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1073741825,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1073741825,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1073741825,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1073741825,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_8c8dff92-f4c0-4760-93da-9b399edb84cf",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 7444,
          "totalElapsed": 25447
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "scheme": "file"
                },
                "text": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n\n",
                "languageId": "typescriptreact",
                "version": 3842,
                "state": 1
              }
            ],
            "request": "<recentDocuments>\nI have read or edited some files recently, they may be helpful for answering the user's question\n<note>\nThese documents are provided as extra insights but are not meant to be edited or changed in anyway.\n</note>\n<document>\nFrom `/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx` I have read or edited:\n```tsx\n// filepath: git:/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx?%7B%22path%22%3A%22%2Fhome%2Fghanem%2Fcode%2FIsnad%2Fapp%2Fcomponents%2Fhadith-transmission-chain.tsx%22%2C%22ref%22%3A%22~%22%7D\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</document>\n\n\n</recentDocuments>\n<file>\n```tsx\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nmake a root node that all nodes the first two nodes are connected to, the node label is `the prophet (pbuh)` \n</prompt>",
            "response": "I'll help you modify the code to add a root node representing \"the prophet (pbuh)\" that connects to the first level narrators.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd a root node and connect it to first-level narrators. We'll modify the data transformation logic in the useMemo hook.\n\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n// ...existing code...\n\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for determining maxChainLength and levelNodes...\n\n    // Create nodes with positions\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            // ...existing node creation code...\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n// ...existing code...\n```\n\nThe changes:\n1. Added a root node representing the Prophet (PBUH) at the top of the graph\n2. Positioned it at the center-top of the visualization\n3. Connected all first-level narrators (index 0) to this root node\n4. Used a gold color to distinguish the Prophet's node\n\nThe rest of the component remains unchanged. The root node will appear at the top of the graph with connections flowing down to the first level of narrators."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for determining maxChainLength and levelNodes...\n\n    // Create nodes with positions\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            // ...existing node creation code...\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n// ...existing code...\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "I'll help you modify the code to add a root node representing \"the prophet (pbuh)\" that connects to the first level narrators.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd a root node and connect it to first-level narrators. We'll modify the data transformation logic in the useMemo hook.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "make a root node that all nodes the first two nodes are connected to, the node label is `the prophet (pbuh)` "
            },
            {
              "role": "assistant",
              "content": "I'll help you modify the code to add a root node representing \"the prophet (pbuh)\" that connects to the first level narrators.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd a root node and connect it to first-level narrators. We'll modify the data transformation logic in the useMemo hook.\n\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n// ...existing code...\n\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for determining maxChainLength and levelNodes...\n\n    // Create nodes with positions\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            // ...existing node creation code...\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n// ...existing code...\n```\n\nThe changes:\n1. Added a root node representing the Prophet (PBUH) at the top of the graph\n2. Positioned it at the center-top of the visualization\n3. Connected all first-level narrators (index 0) to this root node\n4. Used a gold color to distinguish the Prophet's node\n\nThe rest of the component remains unchanged. The root node will appear at the top of the graph with connections flowing down to the first level of narrators."
            }
          ],
          "modelMessageId": "aacadf2c-8c59-403c-8734-e093704049b6",
          "responseId": "33e848c6-fa3b-4972-bcc3-968ae3edb406",
          "sessionId": "ef0d32b7-3544-4456-bead-41a1e5fa496c",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        }
      ],
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1738856163009
    },
    {
      "requestId": "request_ec8679b3-f4fb-423a-81d9-434871e9918b",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 97
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 98
            },
            "text": "Uncaught ReferenceError: can't access lexical declaration 'verticalSpacing' before initialization",
            "kind": "text"
          }
        ],
        "text": "Uncaught ReferenceError: can't access lexical declaration 'verticalSpacing' before initialization"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "scheme": "file"
            },
            "id": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "name": "hadith-transmission-chain.tsx",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "Ah, I see the issue. We need to calculate the `verticalSpacing` before using it in the root node creation. Here's the fix:\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nMove the vertical spacing calculation before creating the root node.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          }
        },
        {
          "value": "  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code...\n  }, [hadithData, dimensions])\n```\n\nThe change reorders the code so that `verticalSpacing` is calculated before it's used in the root node positioning. The rest of the code remains the same.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "\"use client\"",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import React, { useEffect, useState } from \"react\"",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Graph } from \"react-d3-graph\"",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "interface HadithChainProps {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  hadithData: {",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithNo: string;",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    transmissionChains: {",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      SanadNo: string;",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      Narrators: {",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorID: string;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorName: string;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorGen: string;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }[];",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }[];",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }[];",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const generationColors = {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Comp_RA': \"#4CAF50\",",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Follower_Tabi': \"#2196F3\",",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Succ_TabaTabi': \"#FFC107\",",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export default function HadithTransmissionChain({ hadithData }: HadithChainProps) {",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  useEffect(() => {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    setDimensions({",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      width: window.innerWidth,",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      height: window.innerHeight",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const handleResize = () => {",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      setDimensions({",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        width: window.innerWidth,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        height: window.innerHeight",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    window.addEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return () => window.removeEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [])",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Transform data for react-d3-graph",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphData = React.useMemo(() => {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodes: any[] = []",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const links: any[] = []",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const seenNodes = new Set()",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const levelNodes = new Map<number, string[]>()",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodePositions = new Map<string, {x: number, y: number}>()",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // First calculate maxChainLength and verticalSpacing",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const maxChainLength = Math.max(",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    )",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Now add root node (Prophet PBUH)",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootNodeId = \"prophet-pbuh\"",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodes.push({",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      id: rootNodeId,",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      name: \"The Prophet (PBUH)\",",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"#FFD700\", // Gold color for the Prophet's node",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelPosition: \"left\",",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      x: dimensions.width / 2,",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      y: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fx: dimensions.width / 2,",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fy: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    seenNodes.add(rootNodeId)",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // First pass: determine maximum chain length and group nodes by level",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Group nodes by their level",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach(chain => {",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.has(index)) {",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.set(index, [])",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.get(index)?.push(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Create nodes with positions - modified to maintain vertical alignment",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach((chain, chainIndex) => {",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        let parentX: number | null = null;",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        ",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!seenNodes.has(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            seenNodes.add(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const yPosition = (index + 1) * verticalSpacing",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nodesAtLevel = levelNodes.get(index) || []",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const position = nodesAtLevel.indexOf(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const totalNodesAtLevel = nodesAtLevel.length",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Reduce horizontal spacing by using a smaller divisor",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Adjust position to be more centered",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            parentX = xPosition",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Fix the center point calculation",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const isRightSide = xPosition > centerPoint",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodes.push({",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              id: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              name: narrator.NarratorName,",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              color: \"red\",",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              labelPosition: isRightSide ? \"right\" : \"left\",",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              x: xPosition,",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              y: yPosition,",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fx: xPosition, // Fix x position",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fy: yPosition, // Fix y position",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Connect first-level narrators to the Prophet's node",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index === 0) {",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: rootNodeId,",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Update links",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index < chain.Narrators.length - 1) {",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nextNarrator = chain.Narrators[index + 1]",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: nextNarrator.NarratorID,",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return { nodes, links }",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [hadithData, dimensions])",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphConfig = {",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    directed: true,",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodeHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    linkHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightDegree: 1,",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightOpacity: 0.2,",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    maxZoom: 8,",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    minZoom: 0.1,",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    node: {",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"lightgreen\",",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      size: 120, // Further reduced from 150 to 120",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightStrokeColor: \"blue\",",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelProperty: \"name\",",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fontSize: 12,",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightFontSize: 14,",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      renderLabel: true,",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    link: {",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strokeWidth: 1.5,",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightColor: \"lightblue\",",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    d3: {",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      gravity: 0, // Disable gravity",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkLength: 30, // Further reduced from 50 to 30",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkStrength: 1,",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      alphaTarget: 0,",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    height: dimensions.height,",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    width: dimensions.width,",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return (",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    <div style={{ ",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      position: 'fixed', ",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      top: 0, ",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      left: 0, ",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      right: 0, ",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      bottom: 0, ",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      backgroundColor: 'transparent' ",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }}>",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      <Graph",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        id=\"hadith-graph\"",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        data={graphData}",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        config={graphConfig}",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      />",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    </div>",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  )",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1073741825,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_a7cc5534-a0ed-4c2b-8420-dfb3cbc300a7",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 8136,
          "totalElapsed": 20236
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "scheme": "file"
                },
                "text": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n\n",
                "languageId": "typescriptreact",
                "version": 4036,
                "state": 1
              }
            ],
            "request": "<recentDocuments>\nI have read or edited some files recently, they may be helpful for answering the user's question\n<note>\nThese documents are provided as extra insights but are not meant to be edited or changed in anyway.\n</note>\n<document>\nFrom `/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx` I have read or edited:\n```tsx\n// filepath: git:/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx?%7B%22path%22%3A%22%2Fhome%2Fghanem%2Fcode%2FIsnad%2Fapp%2Fcomponents%2Fhadith-transmission-chain.tsx%22%2C%22ref%22%3A%22~%22%7D\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</document>\n\n\n</recentDocuments>\n<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```tsx\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nUncaught ReferenceError: can't access lexical declaration 'verticalSpacing' before initialization\n</prompt>",
            "response": "Ah, I see the issue. We need to calculate the `verticalSpacing` before using it in the root node creation. Here's the fix:\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nMove the vertical spacing calculation before creating the root node.\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code...\n  }, [hadithData, dimensions])\n```\n</file>\n\nThe change reorders the code so that `verticalSpacing` is calculated before it's used in the root node positioning. The rest of the code remains the same."
          },
          "codeBlocks": [
            {
              "code": "  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code...\n  }, [hadithData, dimensions])\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "Ah, I see the issue. We need to calculate the `verticalSpacing` before using it in the root node creation. Here's the fix:\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nMove the vertical spacing calculation before creating the root node.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "Uncaught ReferenceError: can't access lexical declaration 'verticalSpacing' before initialization"
            },
            {
              "role": "assistant",
              "content": "Ah, I see the issue. We need to calculate the `verticalSpacing` before using it in the root node creation. Here's the fix:\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nMove the vertical spacing calculation before creating the root node.\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code...\n  }, [hadithData, dimensions])\n```\n</file>\n\nThe change reorders the code so that `verticalSpacing` is calculated before it's used in the root node positioning. The rest of the code remains the same."
            }
          ],
          "modelMessageId": "e687e577-79d6-4536-821b-a36ccce1e279",
          "responseId": "59e0358f-1e5c-40ee-a839-0ad7d1175b3b",
          "sessionId": "ef0d32b7-3544-4456-bead-41a1e5fa496c",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        }
      ],
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1738856235512
    },
    {
      "requestId": "request_3c0efcc7-fe9e-4cac-abc7-318214015afa",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 56
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 57
            },
            "text": "now it's displayed but we need to center it horizontally",
            "kind": "text"
          }
        ],
        "text": "now it's displayed but we need to center it horizontally"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "scheme": "file"
            },
            "id": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "name": "hadith-transmission-chain.tsx",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "I'll help you center the nodes horizontally by adjusting the x-position calculations.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd horizontal offset and adjust x-position calculations to center the graph:\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          }
        },
        {
          "value": "  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for levelNodes...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition,\n              fy: yPosition,\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  // ...rest of the code...\n```\n\nKey changes:\n1. Added `horizontalOffset` to create padding on both sides\n2. Centered the root node using `dimensions.width / 2`\n3. Modified x-position calculation to distribute nodes evenly within the available space\n4. Used `Math.max(totalNodesAtLevel - 1, 1)` to handle single node case\n5. Adjusted bounds checking to respect the horizontal offset\n\nThese changes will center the graph horizontally with proper spacing between nodes.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "\"use client\"",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import React, { useEffect, useState } from \"react\"",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Graph } from \"react-d3-graph\"",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "interface HadithChainProps {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  hadithData: {",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithNo: string;",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    transmissionChains: {",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      SanadNo: string;",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      Narrators: {",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorID: string;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorName: string;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorGen: string;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }[];",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }[];",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }[];",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const generationColors = {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Comp_RA': \"#4CAF50\",",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Follower_Tabi': \"#2196F3\",",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Succ_TabaTabi': \"#FFC107\",",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export default function HadithTransmissionChain({ hadithData }: HadithChainProps) {",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  useEffect(() => {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    setDimensions({",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      width: window.innerWidth,",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      height: window.innerHeight",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const handleResize = () => {",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      setDimensions({",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        width: window.innerWidth,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        height: window.innerHeight",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    window.addEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return () => window.removeEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [])",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Transform data for react-d3-graph",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphData = React.useMemo(() => {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodes: any[] = []",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const links: any[] = []",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const seenNodes = new Set()",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const levelNodes = new Map<number, string[]>()",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodePositions = new Map<string, {x: number, y: number}>()",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Calculate spacing values",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const maxChainLength = Math.max(",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    )",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Add root node (Prophet PBUH) centered",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootNodeId = \"prophet-pbuh\"",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootX = dimensions.width / 2",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodes.push({",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      id: rootNodeId,",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      name: \"The Prophet (PBUH)\",",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"#FFD700\",",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelPosition: \"left\",",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      x: rootX,",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      y: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fx: rootX,",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fy: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    seenNodes.add(rootNodeId)",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // First pass: determine maximum chain length and group nodes by level",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Group nodes by their level",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach(chain => {",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.has(index)) {",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.set(index, [])",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.get(index)?.push(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Create nodes with positions - modified to maintain vertical alignment",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach((chain, chainIndex) => {",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        let parentX: number | null = null;",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        ",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!seenNodes.has(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            seenNodes.add(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const yPosition = (index + 1) * verticalSpacing",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nodesAtLevel = levelNodes.get(index) || []",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const position = nodesAtLevel.indexOf(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const totalNodesAtLevel = nodesAtLevel.length",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Calculate x position with horizontal offset",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            let xPosition = parentX ?? (horizontalOffset + ",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Ensure xPosition stays within bounds",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            parentX = xPosition",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const centerPoint = dimensions.width / 2",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const isRightSide = xPosition > centerPoint",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodes.push({",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              id: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              name: narrator.NarratorName,",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              color: \"red\",",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              labelPosition: isRightSide ? \"right\" : \"left\",",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              x: xPosition,",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              y: yPosition,",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fx: xPosition, // Fix x position",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fy: yPosition, // Fix y position",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Connect first-level narrators to the Prophet's node",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index === 0) {",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: rootNodeId,",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Update links",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index < chain.Narrators.length - 1) {",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nextNarrator = chain.Narrators[index + 1]",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: nextNarrator.NarratorID,",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return { nodes, links }",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [hadithData, dimensions])",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphConfig = {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    directed: true,",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodeHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    linkHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightDegree: 1,",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightOpacity: 0.2,",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    maxZoom: 8,",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    minZoom: 0.1,",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    node: {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"lightgreen\",",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      size: 120, // Further reduced from 150 to 120",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightStrokeColor: \"blue\",",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelProperty: \"name\",",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fontSize: 12,",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightFontSize: 14,",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      renderLabel: true,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    link: {",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strokeWidth: 1.5,",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightColor: \"lightblue\",",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    d3: {",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      gravity: 0, // Disable gravity",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkLength: 30, // Further reduced from 50 to 30",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkStrength: 1,",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      alphaTarget: 0,",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    height: dimensions.height,",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    width: dimensions.width,",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return (",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    <div style={{ ",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      position: 'fixed', ",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      top: 0, ",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      left: 0, ",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      right: 0, ",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      bottom: 0, ",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      backgroundColor: 'transparent' ",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }}>",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      <Graph",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        id=\"hadith-graph\"",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        data={graphData}",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        config={graphConfig}",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      />",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    </div>",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  )",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1073741825,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1073741825,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_00a794dd-1c29-4391-b564-7b470f1b7225",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 9633,
          "totalElapsed": 46281
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "scheme": "file"
                },
                "text": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n\n",
                "languageId": "typescriptreact",
                "version": 4229,
                "state": 1
              }
            ],
            "request": "<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```tsx\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First calculate maxChainLength and verticalSpacing\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Now add root node (Prophet PBUH)\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\", // Gold color for the Prophet's node\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: dimensions.width / 2,\n      y: verticalSpacing / 2,\n      fx: dimensions.width / 2,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nnow it's displayed but we need to center it horizontally\n</prompt>",
            "response": "I'll help you center the nodes horizontally by adjusting the x-position calculations.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd horizontal offset and adjust x-position calculations to center the graph:\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for levelNodes...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition,\n              fy: yPosition,\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  // ...rest of the code...\n```\n</file>\n\nKey changes:\n1. Added `horizontalOffset` to create padding on both sides\n2. Centered the root node using `dimensions.width / 2`\n3. Modified x-position calculation to distribute nodes evenly within the available space\n4. Used `Math.max(totalNodesAtLevel - 1, 1)` to handle single node case\n5. Adjusted bounds checking to respect the horizontal offset\n\nThese changes will center the graph horizontally with proper spacing between nodes."
          },
          "codeBlocks": [
            {
              "code": "  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for levelNodes...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition,\n              fy: yPosition,\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  // ...rest of the code...\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "I'll help you center the nodes horizontally by adjusting the x-position calculations.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd horizontal offset and adjust x-position calculations to center the graph:\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "now it's displayed but we need to center it horizontally"
            },
            {
              "role": "assistant",
              "content": "I'll help you center the nodes horizontally by adjusting the x-position calculations.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd horizontal offset and adjust x-position calculations to center the graph:\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing code for levelNodes...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition,\n              fy: yPosition,\n            })\n          }\n\n          // ...existing link creation code...\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  // ...rest of the code...\n```\n</file>\n\nKey changes:\n1. Added `horizontalOffset` to create padding on both sides\n2. Centered the root node using `dimensions.width / 2`\n3. Modified x-position calculation to distribute nodes evenly within the available space\n4. Used `Math.max(totalNodesAtLevel - 1, 1)` to handle single node case\n5. Adjusted bounds checking to respect the horizontal offset\n\nThese changes will center the graph horizontally with proper spacing between nodes."
            }
          ],
          "modelMessageId": "921bfa75-fa80-485b-9e2d-ab4551565bd9",
          "responseId": "a06235ba-4478-4068-83d9-e3be7be4b686",
          "sessionId": "ef0d32b7-3544-4456-bead-41a1e5fa496c",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        }
      ],
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1738856365055
    },
    {
      "requestId": "request_84d56895-31a5-487c-b67d-ac5c25c383ec",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 60
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 61
            },
            "text": "if there is a single node at any level make it centered too ",
            "kind": "text"
          }
        ],
        "text": "if there is a single node at any level make it centered too "
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
              "scheme": "file"
            },
            "id": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "name": "hadith-transmission-chain.tsx",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "I'll modify the x-position calculation to center single nodes at any level.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd special handling for single nodes at any level by centering them with the root node.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n  const graphData = React.useMemo(() => {\n    // ...existing declarations...\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2\n    const rootX = dimensions.width / 2  // Store root X position for centering\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing levelNodes grouping code...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with special handling for single nodes\n            let xPosition\n            if (totalNodesAtLevel === 1) {\n              // Center single nodes with root node\n              xPosition = rootX\n            } else {\n              xPosition = parentX ?? (horizontalOffset + \n                (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            }\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            // ...rest of the node creation code...\n          }\n          // ...existing link creation code...\n        })\n      })\n    })\n    // ...existing code...\n  }, [hadithData, dimensions])\n// ...existing code...\n```\n\nKey changes:\n1. Store `rootX` as a reference point for centering\n2. Add a condition to check if `totalNodesAtLevel === 1`\n3. If there's only one node at a level, set its `xPosition` to match the root node's x-position\n4. Otherwise, use the existing distribution logic\n\nThis will ensure that single nodes appear centered beneath the root node, creating a more balanced appearance.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "\"use client\"",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import React, { useEffect, useState } from \"react\"",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Graph } from \"react-d3-graph\"",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "interface HadithChainProps {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  hadithData: {",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithNo: string;",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    transmissionChains: {",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      SanadNo: string;",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      Narrators: {",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorID: string;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorName: string;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        NarratorGen: string;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }[];",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }[];",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }[];",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const generationColors = {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Comp_RA': \"#4CAF50\",",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Follower_Tabi': \"#2196F3\",",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  'Succ_TabaTabi': \"#FFC107\",",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export default function HadithTransmissionChain({ hadithData }: HadithChainProps) {",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  useEffect(() => {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    setDimensions({",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      width: window.innerWidth,",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      height: window.innerHeight",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const handleResize = () => {",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      setDimensions({",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        width: window.innerWidth,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        height: window.innerHeight",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    window.addEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return () => window.removeEventListener('resize', handleResize)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [])",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Transform data for react-d3-graph",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphData = React.useMemo(() => {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodes: any[] = []",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const links: any[] = []",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const seenNodes = new Set()",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const levelNodes = new Map<number, string[]>()",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nodePositions = new Map<string, {x: number, y: number}>()",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Calculate spacing values",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const maxChainLength = Math.max(",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    )",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const horizontalOffset = dimensions.width * 0.2",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootX = dimensions.width / 2  // Store root X position for centering",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Add root node (Prophet PBUH) centered",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rootNodeId = \"prophet-pbuh\"",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodes.push({",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      id: rootNodeId,",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      name: \"The Prophet (PBUH)\",",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"#FFD700\",",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelPosition: \"left\",",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      x: rootX,",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      y: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fx: rootX,",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fy: verticalSpacing / 2,",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    seenNodes.add(rootNodeId)",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // First pass: determine maximum chain length and group nodes by level",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Group nodes by their level",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach(chain => {",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.has(index)) {",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.set(index, [])",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            levelNodes.get(index)?.push(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Create nodes with positions - modified to maintain vertical alignment",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    hadithData.forEach(hadith => {",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      hadith.transmissionChains.forEach((chain, chainIndex) => {",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        let parentX: number | null = null;",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        ",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        chain.Narrators.forEach((narrator, index) => {",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (!seenNodes.has(narrator.NarratorID)) {",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            seenNodes.add(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const yPosition = (index + 1) * verticalSpacing",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nodesAtLevel = levelNodes.get(index) || []",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const position = nodesAtLevel.indexOf(narrator.NarratorID)",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const totalNodesAtLevel = nodesAtLevel.length",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Calculate x position with special handling for single nodes",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            let xPosition",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (totalNodesAtLevel === 1) {",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              // Center single nodes with root node",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              xPosition = rootX",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            } else {",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              xPosition = parentX ?? (horizontalOffset + ",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "                (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            // Ensure xPosition stays within bounds",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            ",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            parentX = xPosition",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const centerPoint = dimensions.width / 2",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const isRightSide = xPosition > centerPoint",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            nodes.push({",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              id: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              name: narrator.NarratorName,",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              color: \"red\",",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              symbolType: \"circle\",",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              labelPosition: isRightSide ? \"right\" : \"left\",",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              x: xPosition,",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              y: yPosition,",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fx: xPosition, // Fix x position",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              fy: yPosition, // Fix y position",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Connect first-level narrators to the Prophet's node",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index === 0) {",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: rootNodeId,",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Update links",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (index < chain.Narrators.length - 1) {",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            const nextNarrator = chain.Narrators[index + 1]",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            links.push({",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              source: narrator.NarratorID,",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              target: nextNarrator.NarratorID,",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              type: \"STRAIGHT\"",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            })",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        })",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      })",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    })",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return { nodes, links }",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }, [hadithData, dimensions])",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const graphConfig = {",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    directed: true,",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    nodeHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    linkHighlightBehavior: true,",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightDegree: 1,",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    highlightOpacity: 0.2,",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    maxZoom: 8,",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    minZoom: 0.1,",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    node: {",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      color: \"lightgreen\",",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      size: 120, // Further reduced from 150 to 120",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightStrokeColor: \"blue\",",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      labelProperty: \"name\",",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      fontSize: 12,",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightFontSize: 14,",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      renderLabel: true,",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    link: {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strokeWidth: 1.5,",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      highlightColor: \"lightblue\",",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    d3: {",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      gravity: 0, // Disable gravity",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkLength: 30, // Further reduced from 50 to 30",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      linkStrength: 1,",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      alphaTarget: 0,",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    },",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    height: dimensions.height,",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    width: dimensions.width,",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return (",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    <div style={{ ",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      position: 'fixed', ",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      top: 0, ",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      left: 0, ",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      right: 0, ",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      bottom: 0, ",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      backgroundColor: 'transparent' ",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }}>",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      <Graph",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        id=\"hadith-graph\"",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        data={graphData}",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        config={graphConfig}",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1073741825,
                  "endLineNumber": 207,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    </div>",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1073741825,
                  "endLineNumber": 208,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  )",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1073741825,
                  "endLineNumber": 209,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1073741825,
                  "endLineNumber": 210,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1073741825,
                  "endLineNumber": 211,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1073741825,
                  "endLineNumber": 212,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_22373b66-b317-4163-b27c-3760008ae24c",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 11487,
          "totalElapsed": 29243
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                  "scheme": "file"
                },
                "text": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n\n",
                "languageId": "typescriptreact",
                "version": 4426,
                "state": 1
              }
            ],
            "request": "<recentDocuments>\nI have read or edited some files recently, they may be helpful for answering the user's question\n<note>\nThese documents are provided as extra insights but are not meant to be edited or changed in anyway.\n</note>\n<document>\nFrom `/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx` I have read or edited:\n```tsx\n// filepath: git:/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx?%7B%22path%22%3A%22%2Fhome%2Fghanem%2Fcode%2FIsnad%2Fapp%2Fcomponents%2Fhadith-transmission-chain.tsx%22%2C%22ref%22%3A%22~%22%7D\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // First pass: determine maximum chain length and group nodes by level\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5  // Reduced spacing\n\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Reduce horizontal spacing by using a smaller divisor\n            let xPosition = parentX ?? ((position + 1) * (dimensions.width / (totalNodesAtLevel + 1)) / 2)\n            \n            // Adjust position to be more centered\n            xPosition = Math.max(100, Math.min(dimensions.width - 100, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            // Fix the center point calculation\n            const centerPoint = dimensions.width / 4  // Changed from width/2 to width/4\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</document>\n\n\n</recentDocuments>\n<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```tsx\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Graph } from \"react-d3-graph\"\n\ninterface HadithChainProps {\n  hadithData: {\n    hadithNo: string;\n    transmissionChains: {\n      SanadNo: string;\n      Narrators: {\n        NarratorID: string;\n        NarratorName: string;\n        NarratorGen: string;\n      }[];\n    }[];\n  }[];\n}\n\nconst generationColors = {\n  'Comp_RA': \"#4CAF50\",\n  'Follower_Tabi': \"#2196F3\",\n  'Succ_TabaTabi': \"#FFC107\",\n}\n\nexport default function HadithTransmissionChain({ hadithData }: HadithChainProps) {\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 })\n\n  useEffect(() => {\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  // Transform data for react-d3-graph\n  const graphData = React.useMemo(() => {\n    const nodes: any[] = []\n    const links: any[] = []\n    const seenNodes = new Set()\n    const levelNodes = new Map<number, string[]>()\n    const nodePositions = new Map<string, {x: number, y: number}>()\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2  // Add 20% padding on each side\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    const rootX = dimensions.width / 2\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // First pass: determine maximum chain length and group nodes by level\n    // Group nodes by their level\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach(chain => {\n        chain.Narrators.forEach((narrator, index) => {\n          if (!levelNodes.has(index)) {\n            levelNodes.set(index, [])\n          }\n          if (!levelNodes.get(index)?.includes(narrator.NarratorID)) {\n            levelNodes.get(index)?.push(narrator.NarratorID)\n          }\n        })\n      })\n    })\n\n    // Create nodes with positions - modified to maintain vertical alignment\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with horizontal offset\n            let xPosition = parentX ?? (horizontalOffset + \n              (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            nodePositions.set(narrator.NarratorID, {x: xPosition, y: yPosition})\n\n            const centerPoint = dimensions.width / 2\n            const isRightSide = xPosition > centerPoint\n\n            nodes.push({\n              id: narrator.NarratorID,\n              name: narrator.NarratorName,\n              color: \"red\",\n              symbolType: \"circle\",\n              labelPosition: isRightSide ? \"right\" : \"left\",\n              x: xPosition,\n              y: yPosition,\n              fx: xPosition, // Fix x position\n              fy: yPosition, // Fix y position\n            })\n          }\n\n          // Connect first-level narrators to the Prophet's node\n          if (index === 0) {\n            links.push({\n              source: rootNodeId,\n              target: narrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n\n          // Update links\n          if (index < chain.Narrators.length - 1) {\n            const nextNarrator = chain.Narrators[index + 1]\n            links.push({\n              source: narrator.NarratorID,\n              target: nextNarrator.NarratorID,\n              type: \"STRAIGHT\"\n            })\n          }\n        })\n      })\n    })\n\n    return { nodes, links }\n  }, [hadithData, dimensions])\n\n  const graphConfig = {\n    directed: true,\n    nodeHighlightBehavior: true,\n    linkHighlightBehavior: true,\n    highlightDegree: 1,\n    highlightOpacity: 0.2,\n    maxZoom: 8,\n    minZoom: 0.1,\n    node: {\n      color: \"lightgreen\",\n      size: 120, // Further reduced from 150 to 120\n      highlightStrokeColor: \"blue\",\n      labelProperty: \"name\",\n      fontSize: 12,\n      highlightFontSize: 14,\n      renderLabel: true,\n    },\n    link: {\n      strokeWidth: 1.5,\n      highlightColor: \"lightblue\",\n    },\n    d3: {\n      gravity: 0, // Disable gravity\n      linkLength: 30, // Further reduced from 50 to 30\n      linkStrength: 1,\n      alphaTarget: 0,\n    },\n    height: dimensions.height,\n    width: dimensions.width,\n  }\n\n  return (\n    <div style={{ \n      position: 'fixed', \n      top: 0, \n      left: 0, \n      right: 0, \n      bottom: 0, \n      backgroundColor: 'transparent' \n    }}>\n      <Graph\n        id=\"hadith-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  )\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nif there is a single node at any level make it centered too \n</prompt>",
            "response": "I'll modify the x-position calculation to center single nodes at any level.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd special handling for single nodes at any level by centering them with the root node.\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n// ...existing code...\n  const graphData = React.useMemo(() => {\n    // ...existing declarations...\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2\n    const rootX = dimensions.width / 2  // Store root X position for centering\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing levelNodes grouping code...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with special handling for single nodes\n            let xPosition\n            if (totalNodesAtLevel === 1) {\n              // Center single nodes with root node\n              xPosition = rootX\n            } else {\n              xPosition = parentX ?? (horizontalOffset + \n                (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            }\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            // ...rest of the node creation code...\n          }\n          // ...existing link creation code...\n        })\n      })\n    })\n    // ...existing code...\n  }, [hadithData, dimensions])\n// ...existing code...\n```\n</file>\n\nKey changes:\n1. Store `rootX` as a reference point for centering\n2. Add a condition to check if `totalNodesAtLevel === 1`\n3. If there's only one node at a level, set its `xPosition` to match the root node's x-position\n4. Otherwise, use the existing distribution logic\n\nThis will ensure that single nodes appear centered beneath the root node, creating a more balanced appearance."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n  const graphData = React.useMemo(() => {\n    // ...existing declarations...\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2\n    const rootX = dimensions.width / 2  // Store root X position for centering\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing levelNodes grouping code...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with special handling for single nodes\n            let xPosition\n            if (totalNodesAtLevel === 1) {\n              // Center single nodes with root node\n              xPosition = rootX\n            } else {\n              xPosition = parentX ?? (horizontalOffset + \n                (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            }\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            // ...rest of the node creation code...\n          }\n          // ...existing link creation code...\n        })\n      })\n    })\n    // ...existing code...\n  }, [hadithData, dimensions])\n// ...existing code...\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "I'll modify the x-position calculation to center single nodes at any level.\n\n### [hadith-transmission-chain.tsx](file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx)\n\nAdd special handling for single nodes at any level by centering them with the root node.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "if there is a single node at any level make it centered too "
            },
            {
              "role": "assistant",
              "content": "I'll modify the x-position calculation to center single nodes at any level.\n\n### /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n\nAdd special handling for single nodes at any level by centering them with the root node.\n\n<file>\n```typescript\n// filepath: /home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx\n// ...existing code...\n  const graphData = React.useMemo(() => {\n    // ...existing declarations...\n\n    // Calculate spacing values\n    const maxChainLength = Math.max(\n      ...hadithData.map(h => Math.max(...h.transmissionChains.map(c => c.Narrators.length)))\n    )\n    const verticalSpacing = dimensions.height / (maxChainLength + 2) / 1.5\n    const horizontalOffset = dimensions.width * 0.2\n    const rootX = dimensions.width / 2  // Store root X position for centering\n\n    // Add root node (Prophet PBUH) centered\n    const rootNodeId = \"prophet-pbuh\"\n    nodes.push({\n      id: rootNodeId,\n      name: \"The Prophet (PBUH)\",\n      color: \"#FFD700\",\n      symbolType: \"circle\",\n      labelPosition: \"left\",\n      x: rootX,\n      y: verticalSpacing / 2,\n      fx: rootX,\n      fy: verticalSpacing / 2,\n    })\n    seenNodes.add(rootNodeId)\n\n    // ...existing levelNodes grouping code...\n\n    hadithData.forEach(hadith => {\n      hadith.transmissionChains.forEach((chain, chainIndex) => {\n        let parentX: number | null = null;\n        \n        chain.Narrators.forEach((narrator, index) => {\n          if (!seenNodes.has(narrator.NarratorID)) {\n            seenNodes.add(narrator.NarratorID)\n            const yPosition = (index + 1) * verticalSpacing\n            \n            const nodesAtLevel = levelNodes.get(index) || []\n            const position = nodesAtLevel.indexOf(narrator.NarratorID)\n            const totalNodesAtLevel = nodesAtLevel.length\n            \n            // Calculate x position with special handling for single nodes\n            let xPosition\n            if (totalNodesAtLevel === 1) {\n              // Center single nodes with root node\n              xPosition = rootX\n            } else {\n              xPosition = parentX ?? (horizontalOffset + \n                (position * (dimensions.width - 2 * horizontalOffset) / (Math.max(totalNodesAtLevel - 1, 1))))\n            }\n            \n            // Ensure xPosition stays within bounds\n            xPosition = Math.max(horizontalOffset, Math.min(dimensions.width - horizontalOffset, xPosition))\n            \n            parentX = xPosition\n            // ...rest of the node creation code...\n          }\n          // ...existing link creation code...\n        })\n      })\n    })\n    // ...existing code...\n  }, [hadithData, dimensions])\n// ...existing code...\n```\n</file>\n\nKey changes:\n1. Store `rootX` as a reference point for centering\n2. Add a condition to check if `totalNodesAtLevel === 1`\n3. If there's only one node at a level, set its `xPosition` to match the root node's x-position\n4. Otherwise, use the existing distribution logic\n\nThis will ensure that single nodes appear centered beneath the root node, creating a more balanced appearance."
            }
          ],
          "modelMessageId": "7839694e-98f7-4204-89a3-c752861e4199",
          "responseId": "1bd8c210-23f0-4069-a849-5417bf4a250a",
          "sessionId": "ef0d32b7-3544-4456-bead-41a1e5fa496c",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "external": "file:///home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "path": "/home/ghanem/code/Isnad/app/components/hadith-transmission-chain.tsx",
          "scheme": "file"
        }
      ],
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1738856488243
    }
  ]
}